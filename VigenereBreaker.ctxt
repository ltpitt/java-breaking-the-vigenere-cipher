#BlueJ class context
comment0.target=VigenereBreaker
comment1.params=message\ whichSlice\ totalSlices
comment1.target=java.lang.String\ sliceString(java.lang.String,\ int,\ int)
comment10.params=
comment10.target=void\ tester()
comment2.params=encrypted\ klength\ mostCommon
comment2.target=int[]\ tryKeyLength(java.lang.String,\ int,\ char)
comment3.params=
comment3.target=void\ breakVigenere()
comment4.params=fr
comment4.target=java.util.HashSet\ readDictionary(edu.duke.FileResource)
comment5.params=message\ dictionary
comment5.target=int\ countWords(java.lang.String,\ java.util.HashSet)
comment5.text=\r\n\ \ \ \ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\r\n\ \ \ \ countWords,\ which\ has\ two\ parameters\u2014a\ String\ message,\r\n\ \ \ \ and\ a\ HashSet\ of\ Strings\ dictionary.\r\n\ \ \ \ This\ method\ should\ split\ the\ message\ into\ words\ (use\ \r\n\ \ \ \ .split(\u201C\\\\W+\u201D),\ which\ returns\ a\ String\ array),\ \r\n\ \ \ \ iterate\ over\ those\ words,\ and\ see\ how\ many\ of\ them\ are\ \r\n\ \ \ \ \u201Creal\ words\u201D\u2014that\ is,\ how\ many\ appear\ in\ the\ dictionary.\r\n\ \ \ \ Recall\ that\ the\ words\ in\ dictionary\ are\ lowercase.\r\n\ \ \ \ This\ method\ should\ return\ the\ integer\ count\ of\ how\r\n\ \ \ \ many\ valid\ words\ it\ found.\r\n
comment6.params=encrypted\ dictionary
comment6.target=java.lang.String\ breakForLanguage(java.lang.String,\ java.util.HashSet)
comment6.text=\r\n\ \ \ \ In\ the\ VigenereBreaker\ class,\ write\ the\ public\ method\ \r\n\ \ \ \ breakForLanguage,\ which\ has\ two\ parameters\u2014a\ String\ encrypted,\r\n\ \ \ \ and\ a\ HashSet\ of\ Strings\ dictionary.\ This\ method\ should\ try\ all\r\n\ \ \ \ key\ lengths\ from\ 1\ to\ 100\ (use\ your\ tryKeyLength\ method\ to\ try\r\n\ \ \ \ one\ particular\ key\ length)\ to\ obtain\ the\ best\ decryption\ for\ each\r\n\ \ \ \ key\ length\ in\ that\ range.\ For\ each\ key\ length,\ your\ method\ should\r\n\ \ \ \ decrypt\ the\ message\ (using\ VigenereCipher\u2019s\ decrypt\ method\ as\ before),\r\n\ \ \ \ and\ count\ how\ many\ of\ the\ \u201Cwords\u201D\ in\ it\ are\ real\ words\ in\ English,\r\n\ \ \ \ based\ on\ the\ dictionary\ passed\ in\ (use\ the\ countWords\ method\ you\ just\ wrote).\r\n\ \ \ \ This\ method\ should\ figure\ out\ which\ decryption\ gives\ the\ largest\r\n\ \ \ \ count\ of\ real\ words,\ and\ return\ that\ String\ decryption.\r\n\ \ \ \ Note\ that\ there\ is\ nothing\ special\ about\ 100;\ we\ will\ just\ give\ you\ messages\r\n\ \ \ \ with\ key\ lengths\ in\ the\ range\ 1\u2013100.\ If\ you\ did\ not\ have\ this\ information,\r\n\ \ \ \ you\ could\ iterate\ all\ the\ way\ to\ encrypted.length().\r\n\ \ \ \ Your\ program\ would\ just\ take\ a\ bit\ longer\ to\ run.\r\n
comment7.params=values
comment7.target=int\ maxIndex(int[])
comment8.params=dictionary
comment8.target=char\ mostCommonCharIn(java.util.HashSet)
comment9.params=encrypted\ language
comment9.target=void\ breakForAllLangs(java.lang.String,\ java.util.HashMap)
numComments=11
